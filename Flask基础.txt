MVC（Model-View-Controller，模型-视图-控制器）

对于简单的程序来说，程序的主模块一般命令为app.py。你也可以使用其他名
称，比如hello.py，但是要避免使用flask.py，因为这和Flask本身冲突。

在一个Web应用里，客户端和服务器上的Flask程序的交互可以简单概括为以下几步：
    1）用户在浏览器输入URL访问某个资源。
    2）Flask接收用户请求并分析请求的URL。
    3）为这个URL找到对应的处理函数。
    4）执行函数并生成响应，返回给浏览器。
    5）浏览器接收并解析响应，将信息显示在页面中。

在上面这些步骤中，大部分都由Flask完成，
我们要做的只是建立处理请求的函数，并为其定义对应的URL规则。

注册路由
    只需为函数附加app.route（）装饰器，并传入URL规则作为参数，我们就可以让URL与函数建立关联。这个过程我们称为注册路由（route），

视图函数
    路由负责管理URL和函数之间的映射，而这个函数则被称为视图函数（view function）。

请求钩子
    有时我们需要对请求进行预处理（preprocessing）和后处理（postprocessing），这时可以使用Flask提供的一些请求钩子（Hook），
    它们可以用来注册在请求处理的不同阶段执行的处理函数（或称为回调函数，即Callback）。这些请求钩子使用装饰器实现，通过程序实例app调用，
    以before_request钩子（请求之前）为例，
        当你对一个函数附加了app.before_request装饰器后，就会将这个函数注册为before_request处理函数，每次执行请求前都会触发所有before_request处理函数。
        before_first_request    注册一个函数，在处理第一个请求前运行
        before_request          注册一个函数，在处理每个请求前运行
        after_request           注册一个函数，如果没有未处理的异常抛出，会在每个请求结束后运行
        teardown_request        注册一个函数，即使有未处理的异常抛出，会在每个请求结束后运行，如果发生异常，会传入异常对象作为参数到注册表中
        after_this_request      在视图函数内注册一个函数，会在这个请求结束后运行

